$.ajax({
    url:'/weekly_packet_mapreduce',
    dataType:'json',
    type:'get'
}).done(function(weekly) {
  var packet_data = [0, 0, 0, 0, 0, 0, 0];
  var vul_data = [0, 0, 0, 0, 0, 0, 0];
  for(var i = 0; i < weekly.length; i++) {
    packet_data[6-i] = weekly[i].value.packet_amount
    vul_data[6-i] = weekly[i].value.vul_amount
  }
  $('#packet_amount').text(packet_data[6]);
  $('#vul_amount').text(vul_data[6]);
  $('#attack_rate').text((vul_data[6]/packet_data[6])*100 + '%')
  // Get context with jQuery - using jQuery's .get() method.
  var salesChartCanvas = $('#salesChart').get(0).getContext('2d');
  // This will get the first returned node in the jQuery collection.
  var salesChart       = new Chart(salesChartCanvas);

  var salesChartData = {
    labels  : ['-6 week', '-5 week', '-4 week', '-3 week', '-2 week', '-1 week', 'now'],
    datasets: [
      {
        label               : 'All Packets',
        fillColor           : 'rgb(210, 214, 222)',
        strokeColor         : 'rgb(210, 214, 222)',
        pointColor          : 'rgb(210, 214, 222)',
        pointStrokeColor    : '#c1c7d1',
        pointHighlightFill  : '#fff',
        pointHighlightStroke: 'rgb(220,220,220)',
        data                : packet_data
      },
      {
        label               : 'Vulnerable packets',
        fillColor           : 'rgba(226,75,58,0.9)',
        strokeColor         : 'rgba(226,75,58,0.8)',
        pointColor          : '#3b8bba',
        pointStrokeColor    : 'rgba(60,141,188,1)',
        pointHighlightFill  : '#fff',
        pointHighlightStroke: 'rgba(60,141,188,1)',
        data                : vul_data
      }
    ]
  };

  var salesChartOptions = {
    // Boolean - If we should show the scale at all
    showScale               : true,
    // Boolean - Whether grid lines are shown across the chart
    scaleShowGridLines      : false,
    // String - Colour of the grid lines
    scaleGridLineColor      : 'rgba(0,0,0,.05)',
    // Number - Width of the grid lines
    scaleGridLineWidth      : 1,
    // Boolean - Whether to show horizontal lines (except X axis)
    scaleShowHorizontalLines: true,
    // Boolean - Whether to show vertical lines (except Y axis)
    scaleShowVerticalLines  : true,
    // Boolean - Whether the line is curved between points
    bezierCurve             : true,
    // Number - Tension of the bezier curve between points
    bezierCurveTension      : 0.3,
    // Boolean - Whether to show a dot for each point
    pointDot                : false,
    // Number - Radius of each point dot in pixels
    pointDotRadius          : 4,
    // Number - Pixel width of point dot stroke
    pointDotStrokeWidth     : 1,
    // Number - amount extra to add to the radius to cater for hit detection outside the drawn point
    pointHitDetectionRadius : 20,
    // Boolean - Whether to show a stroke for datasets
    datasetStroke           : true,
    // Number - Pixel width of dataset stroke
    datasetStrokeWidth      : 2,
    // Boolean - Whether to fill the dataset with a color
    datasetFill             : true,
    // String - A legend template
    legendTemplate          : '<ul class=\'<%=name.toLowerCase()%>-legend\'><% for (var i=0; i<datasets.length; i++){%><li><span style=\'background-color:<%=datasets[i].lineColor%>\'></span><%=datasets[i].label%></li><%}%></ul>',
    // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
    maintainAspectRatio     : true,
    // Boolean - whether to make the chart responsive to window resizing
    responsive              : true
  };

  // Create the line chart
  salesChart.Line(salesChartData, salesChartOptions);

});


$.ajax({
    url:'/get_manufacture_list',
    dataType:'json',
    type:'get'
}).done(function(manufacture) {
  var color = ['#f56954', '#00a65a', '#f39c12', '#00c0ef', '#3c8dbc', '#d2d6de']
  var text_option = ['text-red', 'text-green', 'text-yellow', 'text-aqua', 'text-light-blue', 'text-gray']
  PieData = []
  manufacture_list_data = []
  // -------------
  // - PIE CHART -
  // -------------
  for(var i = 0; i < manufacture.length; i++) {
    PieData.push({value: manufacture[i].value.count, color: color[i], highlight: color[i], label: manufacture[i]._id})
    manufacture_list_data.push('<li><i class="fa fa-circle-o ' + text_option[i] + '">' + manufacture[i]._id + '</li>')
    if(i >= 5) {
      break
    }
  }
  for(var i = 0; i < manufacture_list_data.length; i++) {
    $('#manufacture_list').append(manufacture_list_data[i])
  }
  // Get context with jQuery - using jQuery's .get() method.
  var pieChartCanvas = $('#pieChart').get(0).getContext('2d');
  var pieChart       = new Chart(pieChartCanvas);
  
  var pieOptions     = {
    // Boolean - Whether we should show a stroke on each segment
    segmentShowStroke    : true,
    // String - The colour of each segment stroke
    segmentStrokeColor   : '#fff',
    // Number - The width of each segment stroke
    segmentStrokeWidth   : 1,
    // Number - The percentage of the chart that we cut out of the middle
    percentageInnerCutout: 50, // This is 0 for Pie charts
    // Number - Amount of animation steps
    animationSteps       : 100,
    // String - Animation easing effect
    animationEasing      : 'easeOutBounce',
    // Boolean - Whether we animate the rotation of the Doughnut
    animateRotate        : true,
    // Boolean - Whether we animate scaling the Doughnut from the centre
    animateScale         : false,
    // Boolean - whether to make the chart responsive to window resizing
    responsive           : true,
    // Boolean - whether to maintain the starting aspect ratio or not when responsive, if set to false, will take up entire container
    maintainAspectRatio  : false,
    // String - A legend template
    legendTemplate       : '<ul class=\'<%=name.toLowerCase()%>-legend\'><% for (var i=0; i<segments.length; i++){%><li><span style=\'background-color:<%=segments[i].fillColor%>\'></span><%if(segments[i].label){%><%=segments[i].label%><%}%></li><%}%></ul>',
    // String - A tooltip template
    tooltipTemplate      : '<%=value %> <%=label%> users'
  };
  // Create pie or douhnut chart
  // You can switch between pie and douhnut using the method below.
  pieChart.Doughnut(PieData, pieOptions);
  // -----------------
  // - END PIE CHART -
  // -----------------
});



$.ajax({
    url:'/get_packetsource_location',
    dataType:'json',
    type:'get'
}).done(function(geo_data) {
  var mark = []
  for(var i = 0; i < geo_data.length; i++) {
    mark.push({latLng: [geo_data[i]._id.lat, geo_data[i]._id.lon]})
  }

  $('#area').text(geo_data.length)
  $('#world-map-markers').vectorMap({
    map              : 'world_mill_en',
    normalizeFunction: 'polynomial',
    hoverOpacity     : 0.7,
    hoverColor       : false,
    backgroundColor  : 'transparent',
    regionStyle      : {
      initial      : {
        fill            : 'rgba(210, 214, 222, 1)',
        'fill-opacity'  : 1,
        stroke          : 'none',
        'stroke-width'  : 0,
        'stroke-opacity': 1
      },
      hover        : {
        'fill-opacity': 0.7,
        cursor        : 'pointer'
      },
      selected     : {
        fill: 'yellow'
      },
      selectedHover: {}
    },
    markerStyle      : {
      initial: {
        fill  : '#00a65a',
        stroke: '#111'
      }
    },
    markers          : mark
  });
});



$.ajax({
    url:'/get_daily_packet',
    dataType:'json',
    type:'get'
}).done(function(mapreduce) {
    var data = [];
    for(var i = 0; i < mapreduce.length; i++) {
      data.push([mapreduce[i].weekday, mapreduce[i].packet_amount])
      
      if(i > 7) {
          break;
      }
    }

    var bar_data = {
      data : data,
      color: '#3c8dbc'
    }
    $.plot('#bar-chart', [bar_data], {
      grid  : {
        borderWidth: 1,
        borderColor: '#f3f3f3',
        tickColor  : '#f3f3f3'
      },
      series: {
        bars: {
          show    : true,
          barWidth: 0.5,
          align   : 'center'
        }
      },
      xaxis : {
        mode      : 'categories',
        tickLength: 0
      }
    })

}); 

$(function () {

  /* END BAR CHART */

  /*
   * Flot Interactive Chart
   * -----------------------
   */
  // We use an inline data source in the example, usually data would
  // be fetched from a server
  var data = [], totalPoints = 10
  while (data.length < totalPoints) {
    data.push(0)
  }
  function getRandomData() {

    data = data.slice(1)

    $.ajax({
        url:'/get_server_load',
        dataType:'json',
        type:'get'
    }).done(function(mapreduce) {
      data.push(mapreduce[0].server_load)
    }); 
    // Zip the generated y values with the x values
    var res = []
    for (var i = 0; i < data.length; ++i) {
      res.push([i, data[i]])
    }

    return res
  }

  var interactive_plot = $.plot('#interactive', [getRandomData()], {
    grid  : {
      borderColor: '#f3f3f3',
      borderWidth: 1,
      tickColor  : '#f3f3f3'
    },
    series: {
      shadowSize: 0, // Drawing is faster without shadows
      color     : '#3c8dbc'
    },
    lines : {
      fill : true, //Converts the line chart to area chart
      color: '#3c8dbc'
    },
    yaxis : {
      min : 0,
      max : 100,
      show: true
    },
    xaxis : {
      show: true
    }
  })

  var updateInterval = 1500 //Fetch data ever x milliseconds
  var realtime       = 'on' //If == to on then fetch data every x seconds. else stop fetching
  function update() {

    interactive_plot.setData([getRandomData()])

    // Since the axes don't change, we don't need to call plot.setupGrid()
    interactive_plot.draw()
    if (realtime === 'on')
      setTimeout(update, updateInterval)
  }

  //INITIALIZE REALTIME DATA FETCHING
  if (realtime === 'on') {
    update()
  }
  //REALTIME TOGGLE
  $('#realtime .btn').click(function () {
    if ($(this).data('toggle') === 'on') {
      realtime = 'on'
    }
    else {
      realtime = 'off'
    }
    update()
  })
  /*
   * END INTERACTIVE CHART
   */
})


$(function () {

  'use strict';

  /* ChartJS
   * -------
   * Here we will create a few charts using ChartJS
   */

  // -----------------------
  // - MONTHLY SALES CHART -
  // -----------------------

  // ---------------------------
  // - END MONTHLY SALES CHART -
  // ---------------------------



  // -----------------
  // - SPARKLINE BAR -
  // -----------------
  $('.sparkbar').each(function () {
    var $this = $(this);
    $this.sparkline('html', {
      type    : 'bar',
      height  : $this.data('height') ? $this.data('height') : '30',
      barColor: $this.data('color')
    });
  });

  // -----------------
  // - SPARKLINE PIE -
  // -----------------
  $('.sparkpie').each(function () {
    var $this = $(this);
    $this.sparkline('html', {
      type       : 'pie',
      height     : $this.data('height') ? $this.data('height') : '90',
      sliceColors: $this.data('color')
    });
  });

  // ------------------
  // - SPARKLINE LINE -
  // ------------------
  $('.sparkline').each(function () {
    var $this = $(this);
    $this.sparkline('html', {
      type     : 'line',
      height   : $this.data('height') ? $this.data('height') : '90',
      width    : '100%',
      lineColor: $this.data('linecolor'),
      fillColor: $this.data('fillcolor'),
      spotColor: $this.data('spotcolor')
    });
  });
});
